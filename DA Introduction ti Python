1) What are the types of Applications?
•	Web Applications: Applications that run on web servers and are accessed via browsers (e.g., Gmail, Facebook).
•	Mobile Applications: Apps developed for mobile devices (e.g., WhatsApp, Instagram).
•	Desktop Applications: Software that runs on personal computers (e.g., Microsoft Word, VLC Media Player).
•	Embedded Systems Applications: Programs that run on hardware systems designed for specific tasks (e.g., smartwatches, medical devices).
•	Console Applications: Applications that run in a console or command-line interface (e.g., terminal commands, scripts).
•	Gaming Applications: Designed for entertainment and interactive experiences (e.g., Minecraft, PUBG).
________________________________________
2) What is programming?
•	Programming is the process of creating instructions that a computer can execute. These instructions are written in programming languages like Python, Java, or C++.
________________________________________
3) What is Python?
•	Python is a high-level, interpreted programming language known for its simplicity and readability. It supports multiple programming paradigms like procedural, object-oriented, and functional programming.
________________________________________
4) Write a Python program to check if a number is positive, negative, or zero.
python
Copy code
num = float(input("Enter a number: "))

if num > 0:
    print("The number is positive")
elif num < 0:
    print("The number is negative")
else:
    print("The number is zero")
________________________________________
5) Write a Python program to get the factorial of a given number.
python
Copy code
def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

num = int(input("Enter a number: "))
print("Factorial of", num, "is", factorial(num))
________________________________________
6) Write a Python program to get the Fibonacci series of a given range.
python
Copy code
def fibonacci(n):
    fib_seq = [0, 1]
    while len(fib_seq) < n:
        fib_seq.append(fib_seq[-1] + fib_seq[-2])
    return fib_seq

n = int(input("Enter the number of terms: "))
print(fibonacci(n))
________________________________________
7) How is memory managed in Python?
•	Python uses dynamic memory allocation and an internal memory manager to handle memory. Python’s memory management involves:
o	Private Heap Space: Python objects and data structures are stored here.
o	Garbage Collection: Python has an automatic garbage collector that reclaims memory by removing unused objects.
o	Memory Pools: Python uses memory pools to efficiently manage small objects.
________________________________________
8) What is the purpose of the continue statement in Python?
•	The continue statement in Python is used inside loops to skip the current iteration and move to the next iteration without executing the remaining code in the loop body for that iteration.
________________________________________
9) Write a Python program to swap two numbers with and without using a temporary variable.
Python
Copy code
# With temp variable
a = int(input("Enter first number: "))
b = int(input("Enter second number: "))

temp = a
a = b
b = temp

print("After swapping: a =", a, "b =", b)

# Without temp variable
a, b = b, a
print("After swapping without temp: a =", a, "b =", b)
________________________________________
10) Write a Python program to find whether a given number is even or odd.
Python
Copy code
num = int(input("Enter a number: "))

if num % 2 == 0:
    print(f"{num} is an even number")
else:
    print(f"{num} is an odd number")
________________________________________
11) Write a Python program to test whether a passed letter is a vowel or not.
Python
Copy code
letter = input ("Enter a letter: "). lower()

if letter in 'aeiou':
    print(f"{letter} is a vowel")
else:
    print(f"{letter} is not a vowel")
________________________________________
12) Write a Python program to sum three given integers. If two values are equal, the sum will be zero.
Python
Copy code
def sum_of_integers (a, b, c):
    if a == b or b == c or a == c:
        return 0
    return a + b + c

a, b, c = int (input ()), int (input ()), int (input ())
print ("Sum:", sum_of_integers (a, b, c))
________________________________________
13) Write a Python program that will return True if two given integers are equal or their sum or difference is 5.
Python
Copy code
def check_values (a, b):
    return a == b or (a + b == 5) or (abs (a - b) == 5)

a, b = int (input ()), int (input ())
print (check_values (a, b))
________________________________________
14) Write a Python program to sum the first n positive integers.
Python
Copy code
n = int (input ("Enter a positive integer: "))
sum_n = n * (n + 1) // 2
print ("Sum of first", n, "positive integers is", sum_n)
________________________________________
15) Write a Python program to calculate the length of a string.
Python
Copy code
string = input ("Enter a string: ")
print ("Length of the string is:", len(string))
________________________________________
16) Write a Python program to count the number of characters (character frequency) in a string.
Python
Copy code
string = input ("Enter a string: ")
char_freq = {}

for char in string:
    char_freq[char] = char_freq.get (char, 0) + 1

print ("Character frequency:", char_freq)
________________________________________
17) What are negative indexes, and why are they used?
•	Negative indexes in Python are used to access elements from the end of a list or sequence. For example, list [-1] will return the last element of the list. This makes accessing elements relative to the sequence's end easier without calculating the exact index.
________________________________________
18) Write a Python program to count occurrences of a substring in a string.
Python
Copy code
string = input ("Enter the main string: ")
substring = input ("Enter the substring: ")

count = string. count(substring)
print(f"'{substring}' occurs {count} times in the main string.")

19) Write a Python program to count the occurrences of each word in a given sentence.
Python
Copy code
sentence = input("Enter a sentence: ")
words = sentence.split()
word_count = {}

for word in words:
    word_count[word] = word_count.get(word, 0) + 1

print("Word occurrences:", word_count)
________________________________________
20) Write a Python program to get a single string from two given strings, separated by a space, and swap the first two characters of each string.
Python
Copy code
def swap_first_two(str1, str2):
    new_str1 = str2[:2] + str1[2:]
    new_str2 = str1[:2] + str2[2:]
    return new_str1 + " " + new_str2

str1 = input("Enter first string: ")
str2 = input("Enter second string: ")
print(swap_first_two(str1, str2))
________________________________________
21) Write a Python program to add 'ing' at the end of a given string (length should be at least 3). If the given string already ends with 'ing', then add 'ly'. If the string length is less than 3, leave it unchanged.
Python
Copy code
def modify_string(s):
    if len(s) < 3:
        return s
    if s.endswith('ing'):
        return s + 'ly'
    return s + 'ing'

s = input("Enter a string: ")
print(modify_string(s))
________________________________________
22) Write a Python function to reverse a string if its length is a multiple of 4.
Python
Copy code
def reverse_if_multiple_of_four(s):
    if len(s) % 4 == 0:
        return s[::-1]
    return s

s = input("Enter a string: ")
print(reverse_if_multiple_of_four(s))
________________________________________
23) Write a Python program to get a string made of the first 2 and the last 2 characters from a given string. If the string length is less than 2, return an empty string.
Python
Copy code
def first_last_two(s):
    if len(s) < 2:
        return ''
    return s[:2] + s[-2:]

s = input("Enter a string: ")
print(first_last_two(s))
________________________________________
24) Write a Python function to insert a string in the middle of a string.
Python
Copy code
def insert_in_middle(s, word):
    mid = len(s) // 2
    return s[:mid] + word + s[mid:]

s = input("Enter a string: ")
word = input("Enter a word to insert: ")
print(insert_in_middle(s, word))
________________________________________
25) What is List? How will you reverse a list?
•	List: A list is a mutable, ordered collection of items in Python, which can be of different data types.
•	Reverse a list:
Python
Copy code
my_list = [1, 2, 3, 4, 5]
my_list.reverse()  # Method 1
print(my_list)

# Method 2
my_list = my_list[::-1]
print(my_list)
________________________________________
26) How will you remove the last object from a list?
Python
Copy code
my_list = [1, 2, 3, 4, 5]
my_list.pop()  # Removes last object
print(my_list)
________________________________________
27) Suppose list1 is [2, 33, 222, 14, 25], what is list1[-1]?
•	list1[-1] is 25, as negative indexing starts from the end of the list.
________________________________________
28) Differentiate between append() and extend() methods.
•	append(): Adds its argument as a single element to the end of the list.
•	extend(): Adds each element of its argument (an iterable) to the list.
________________________________________
29) Write a Python function to get the largest number, smallest number, and sum of all elements from a list.
Python
Copy code
def list_stats(lst):
    return max(lst), min(lst), sum(lst)

lst = [1, 2, 3, 4, 5]
print(list_stats(lst))
________________________________________
30) How will you compare two lists?
•	Two lists can be compared using ==, which checks if both lists have the same elements in the same order:
Python
Copy code
list1 = [1, 2, 3]
list2 = [1, 2, 3]
print(list1 == list2)  # True
________________________________________
31) Write a Python program to count the number of strings where the string length is 2 or more and the first and last character are the same from a given list of strings.
Python
Copy code
def count_special_strings(strings):
    return sum(1 for s in strings if len(s) >= 2 and s[0] == s[-1])

strings = ['abc', 'xyz', 'aba', '1221']
print(count_special_strings(strings))
________________________________________
32) Write a Python program to remove duplicates from a list.
Python
Copy code
my_list = [1, 2, 2, 3, 4, 4, 5]
unique_list = list(set(my_list))
print(unique_list)
________________________________________
33) Write a Python program to check if a list is empty or not.
Python
Copy code
my_list = []
if not my_list:
    print("List is empty")
else:
    print("List is not empty")
34) Write a Python function that takes two lists and returns True if they have at least one common member.
Python
Copy code
def common_member(list1, list2):
    return any(item in list1 for item in list2)

list1 = [1, 2, 3]
list2 = [3, 4, 5]
print(common_member(list1, list2))
________________________________________
35) Write a Python program to generate and print a list of the first and last 5 elements where the values are squares of numbers between 1 and 30.
Python
Copy code
squares = [x**2 for x in range(1, 31)]
print(squares[:5] + squares[-5:])
________________________________________
36) Write a Python function that takes a list and returns a new list with unique elements of the first list.
Python
Copy code
def unique_elements(lst):
    return list(set(lst))

lst = [1, 2, 2, 3, 4, 4, 5]
print(unique_elements(lst))
________________________________________
37) Write a Python program to convert a list of characters into a string.
Python
Copy code
char_list = ['a', 'b', 'c', 'd']
string = ''.join(char_list)
print(string)
________________________________________
38) Write a Python program to select an item randomly from a list.
Python
Copy code
import random

my_list = [1, 2, 3, 4, 5]
print(random.choice(my_list))
________________________________________
39) Write a Python program to find the second smallest number in a list.
Python
Copy code
def second_smallest(numbers):
    unique_numbers = list(set(numbers))
    unique_numbers.sort()
    return unique_numbers[1]

numbers = [1, 2, 2, 3, 4, 5]
print(second_smallest(numbers))
________________________________________
40) Write a Python program to get unique values from a list.
Python
Copy code
my_list = [1, 2, 2, 3, 4, 4, 5]
unique_values = list(set(my_list))
print(unique_values)
________________________________________
41) Write a Python program to check whether a list contains a sub-list.
Python
Copy code
def is_sublist(lst, sublist):
    return str(sublist)[1:-1] in str(lst)

lst = [1, 2, 3, 4, 5]
sublist = [2, 3]
print(is_sublist(lst, sublist))
________________________________________
42) Write a Python program to split a list into different variables.
Python
Copy code
my_list = [1, 2, 3]
a, b, c = my_list
print(a, b, c)
________________________________________
43) What is a tuple? Difference between list and tuple.
•	A tuple is an immutable, ordered collection of items.
•	Difference:
o	Lists are mutable (can be changed).
o	Tuples are immutable (cannot be changed).
________________________________________
44) Write a Python program to create a tuple with different data types.
Python
Copy code
my_tuple = (1, "Hello", 3.14, True)
print(my_tuple)
________________________________________
45) Write a Python program to unzip a list of tuples into individual lists.
Python
Copy code
tuples_list = [(1, 'a'), (2, 'b'), (3, 'c')]
numbers, letters = zip(*tuples_list)
print(list(numbers))
print(list(letters))

47) How will you create a dictionary using tuples in Python?
Python
Copy code
# Creating a dictionary using a list of tuples
tuples_list = [('a', 1), ('b', 2), ('c', 3)]
dictionary = dict(tuples_list)
print(dictionary)
•	Explanation: You can use the dict() function to convert a list of tuples into a dictionary.
________________________________________
48) Write a Python script to sort (ascending and descending) a dictionary by value.
Python
Copy code
# Ascending order
my_dict = {'a': 3, 'b': 1, 'c': 2}
sorted_dict_asc = dict(sorted(my_dict.items(), key=lambda item: item[1]))
print("Ascending:", sorted_dict_asc)

# Descending order
sorted_dict_desc = dict(sorted(my_dict.items(), key=lambda item: item[1], reverse=True))
print("Descending:", sorted_dict_desc)
________________________________________
49) Write a Python script to concatenate the following dictionaries to create a new one.
Python
Copy code
dict1 = {'a': 1, 'b': 2}
dict2 = {'c': 3, 'd': 4}
dict3 = {'e': 5, 'f': 6}

# Merging dictionaries
result = {**dict1, **dict2, **dict3}
print(result)
________________________________________
50) Write a Python script to check if a given key already exists in a dictionary.
Python
Copy code
my_dict = {'a': 1, 'b': 2, 'c': 3}
key = 'b'

if key in my_dict:
    print(f"{key} exists in the dictionary")
else:
    print(f"{key} does not exist in the dictionary")
________________________________________
51) How do you traverse through a dictionary object in Python?
•	You can traverse a dictionary using a for loop:
Python
Copy code
my_dict = {'a': 1, 'b': 2, 'c': 3}

# Traverse keys and values
for key, value in my_dict.items():
    print(f"Key: {key}, Value: {value}")
________________________________________
52) How do you check the presence of a key in a dictionary?
•	Use the in keyword:
Python
Copy code
my_dict = {'a': 1, 'b': 2}
print('a' in my_dict)  # Output: True
________________________________________
53) Write a Python script to print a dictionary where the keys are numbers between 1 and 15.
Python
Copy code
my_dict = {i: i**2 for i in range(1, 16)}
print(my_dict)
________________________________________
54) Write a Python program to check if multiple keys exist in a dictionary.
Python
Copy code
my_dict = {'a': 1, 'b': 2, 'c': 3}
keys_to_check = ['a', 'b']

if all(key in my_dict for key in keys_to_check):
    print("All keys exist in the dictionary")
else:
    print("Not all keys exist")
________________________________________
55) Write a Python script to merge two Python dictionaries.
Python
Copy code
dict1 = {'a': 1, 'b': 2}
dict2 = {'c': 3, 'd': 4}

# Merging
merged_dict = {**dict1, **dict2}
print(merged_dict)
________________________________________
56) Write a Python program to map two lists into a dictionary.
Python
Copy code
keys = ['a', 'b', 'c']
values = [1, 2, 3]

# Mapping two lists into a dictionary
mapped_dict = dict(zip(keys, values))
print(mapped_dict)
________________________________________
57) Write a Python program to find the highest 3 values in a dictionary.
Python
Copy code
my_dict = {'a': 300, 'b': 400, 'c': 200, 'd': 500}
highest_values = sorted(my_dict.values(), reverse=True)[:3]
print("Highest 3 values:", highest_values)
________________________________________
58) Write a Python program to combine values in a Python list of dictionaries.
Python
Copy code
from collections import Counter

data = [{'item': 'item1', 'amount': 400}, {'item': 'item2', 'amount': 300}, {'item': 'item1', 'amount': 750}]
result = Counter()

for d in data:
    result[d['item']] += d['amount']

print(result)
________________________________________
59) Write a Python program to create a dictionary from a string (track the count of letters).
Python
Copy code
from collections import Counter

s = "w3resource"
letter_count = Counter(s)
print(letter_count)
________________________________________
60) Write a Python function to calculate the factorial of a number (a nonnegative integer).
Python
Copy code
def factorial(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n-1)

print(factorial(5))  # Output: 120
________________________________________
61) Write a Python function to check whether a number is in a given range.
Python
Copy code
def is_in_range(n, start, end):
    return start <= n <= end

print(is_in_range(5, 1, 10))  # Output: True
________________________________________
62) Write a Python function to check whether a number is perfect or not.
Python
Copy code
def is_perfect(n):
    divisors_sum = sum(i for i in range(1, n) if n % i == 0)
    return divisors_sum == n

print(is_perfect(6))  # Output: True (6 is a perfect number)
________________________________________
63) Write a Python function that checks whether a passed string is a palindrome or not.
Python
Copy code
def is_palindrome(s):
    return s == s[::-1]

print(is_palindrome("madam"))  # Output: True

63) Write a Python function to check whether a number is perfect or not. A perfect number is a number that is equal to the sum of its divisors, excluding itself.
Python
Copy code
def is_perfect(n):
    divisors_sum = sum(i for i in range(1, n) if n % i == 0)
    return divisors_sum == n

# Test the function
print(is_perfect(6))  # Output: True (6 is a perfect number: 1 + 2 + 3 = 6)
________________________________________
64) Write a Python function that checks whether a passed string is a palindrome or not. A palindrome is a string that reads the same forwards and backward.
Python
Copy code
def is_palindrome(s):
    return s == s[::-1]

# Test the function
print(is_palindrome("madam"))  # Output: True
print(is_palindrome("hello"))  # Output: False
________________________________________
65) How many basic types of functions are available in Python? There are two basic types of functions in Python:
1.	Built-in functions: These are functions that are already present in Python (e.g., print(), len(), input()).
2.	User-defined functions: These are functions that are created by the user using the def keyword.
________________________________________
66) How can you pick a random item from a list or tuple? You can use the random.choice() method from the random module.
python
Copy code
import random

my_list = [1, 2, 3, 4, 5]
print(random.choice(my_list))  # Picks a random item from the list
________________________________________
67) How can you pick a random item from a range? You can use the random.randrange() method to pick a random number from a specified range.
python
Copy code
import random

print(random.randrange(1, 10))  # Random number between 1 and 9
________________________________________
68) How can you get a random number in Python? You can use random.randint() for an inclusive random integer within a range or random.random() for a random float between 0 and 1.
python
Copy code
import random

print(random.randint(1, 100))  # Random integer between 1 and 100
print(random.random())  # Random float between 0 and 1
________________________________________
69) How will you set the starting value in generating random numbers? You can set the starting value (seed) using random.seed(). It ensures the reproducibility of the random numbers.
Python
Copy code
import random

random.seed(10)
print(random.randint(1, 100))  # Will give the same result if run with the same seed
________________________________________
70) How will you randomize the items of a list in place? Use random.shuffle() to randomize the items in a list in place.
Python
Copy code
import random

my_list = [1, 2, 3, 4, 5]
random.shuffle(my_list)
print(my_list)  # The list is shuffled in place
________________________________________
71) What is the file function in Python? What are the keywords to create and write a file? The file function in Python is used to work with files (reading, writing, or appending). The common modes for opening a file are:
•	'r' : Read (default mode)
•	'w' : Write (creates a new file or truncates if exists)
•	'a' : Append (adds data to the end of the file)
To create a file and write to it:
Python
Copy code
with open('example.txt', 'w') as f:
    f.write("Hello, world!")
________________________________________
72) Write a Python program to read an entire text file.
Python
Copy code
with open('example.txt', 'r') as f:
    content = f.read()
    print(content)
________________________________________
73) Write a Python program to append text to a file and display the text.
Python
Copy code
with open('example.txt', 'a') as f:
    f.write("\nAppended text.")

with open('example.txt', 'r') as f:
    content = f.read()
    print(content)
________________________________________
74) Write a Python program to read the first n lines of a file.
Python
Copy code
def read_first_n_lines(file_name, n):
    with open(file_name, 'r') as f:
        for _ in range(n):
            print(f.readline(), end='')

# Example usage
read_first_n_lines('example.txt', 2)
________________________________________
75) Write a Python program to read the last n lines of a file.
Python
Copy code
def read_last_n_lines(file_name, n):
    with open(file_name, 'r') as f:
        lines = f.readlines()
        for line in lines[-n:]:
            print(line, end='')

# Example usage
read_last_n_lines('example.txt', 2)
________________________________________
76) Write a Python program to read a file line by line and store it into a list.
Python
Copy code
def file_to_list(file_name):
    with open(file_name, 'r') as f:
        return f.readlines()

# Example usage
lines_list = file_to_list('example.txt')
print(lines_list)
________________________________________
77) Write a Python program to read a file line by line and store it into a variable.
Python
Copy code
def file_to_string(file_name):
    with open(file_name, 'r') as f:
        return f.read()

# Example usage
file_content = file_to_string('example.txt')
print(file_content)

78) Write a Python program to find the longest word in a file.
Python
Copy code
def find_longest_word(file_name):
    with open(file_name, 'r') as f:
        words = f.read().split()
    longest_word = max(words, key=len)
    return longest_word

# Example usage
print(find_longest_word('example.txt'))
________________________________________
79) Write a Python program to count the number of lines in a text file.
Python
Copy code
def count_lines(file_name):
    with open(file_name, 'r') as f:
        return len(f.readlines())

# Example usage
print(count_lines('example.txt'))
________________________________________
80) Write a Python program to count the frequency of words in a file.
Python
Copy code
from collections import Counter

def word_frequency(file_name):
    with open(file_name, 'r') as f:
        words = f.read().split()
    return Counter(words)

# Example usage
print(word_frequency('example.txt'))
________________________________________
81) Write a Python program to write a list to a file.
Python
Copy code
def write_list_to_file(file_name, my_list):
    with open(file_name, 'w') as f:
        for item in my_list:
            f.write(f"{item}\n")

# Example usage
my_list = ['apple', 'banana', 'cherry']
write_list_to_file('output.txt', my_list)
________________________________________
82) Write a Python program to copy the contents of a file to another file.
Python
Copy code
def copy_file(source_file, destination_file):
    with open(source_file, 'r') as src:
        content = src.read()
    with open(destination_file, 'w') as dest:
        dest.write(content)

# Example usage
copy_file('example.txt', 'copy_example.txt')
________________________________________
83) Explain Exception handling? What is an Error in Python?
•	Exception Handling in Python is the process of responding to the occurrence of exceptions—runtime errors that disrupt the normal flow of a program. Python uses the try-except blocks to handle exceptions.
•	An Error in Python can be a syntax error (detected before code execution) or an exception (runtime error).
Example of exception handling:
Python
Copy code
try:
    a = 10 / 0
except ZeroDivisionError:
    print("Cannot divide by zero!")
________________________________________
84) How many except statements can a try-except block have? Name some built-in exception classes.
•	A try-except block can have multiple except statements to handle different exceptions.
Some built-in exception classes:
1.	ZeroDivisionError
2.	ValueError
3.	TypeError
4.	IndexError
________________________________________
85) When will the else part of try-except-else be executed?
•	The else block is executed only if no exceptions are raised in the try block.
Python
Copy code
try:
    result = 10 / 2
except ZeroDivisionError:
    print("Cannot divide by zero.")
else:
    print("Division successful:", result)
________________________________________
86) Can one block of except statements handle multiple exceptions?
•	Yes, you can handle multiple exceptions by listing them as a tuple in a single except block.
Python
Copy code
try:
    result = int("abc")
except (ValueError, TypeError):
    print("Caught an exception!")
________________________________________
87) When is the finally block executed?
•	The finally block is always executed, regardless of whether an exception occurred or not.
Python
Copy code
try:
    result = 10 / 0
except ZeroDivisionError:
    print("Error occurred!")
finally:
    print("This will always run.")
________________________________________
88) What happens when '1' == 1 is executed?
•	This comparison returns False because it compares a string ('1') with an integer (1), and they are of different types.
________________________________________
89) How do you handle exceptions with try-except-finally in Python? Explain with coding snippets.
•	You can use try to run a block of code, except to catch specific errors, and finally to execute cleanup code that will run regardless of an error.
Python
Copy code
try:
    result = 10 / 0
except ZeroDivisionError:
    print("Cannot divide by zero!")
finally:
    print("Execution finished.")
________________________________________
90) Write a Python program that asks the user to enter only odd numbers, else raise an exception.
Python
Copy code
def check_odd_number():
    try:
        num = int(input("Enter an odd number: "))
        if num % 2 == 0:
            raise ValueError("This is not an odd number.")
    except ValueError as e:
        print(e)

# Example usage
check_odd_number()


